AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  DomainName:
    Type: String
    Description: Domain to create cert for
  ValidationDomain:
    Type: String
    Description: Domain to validate cert against (Route 53 zone)
  CertRegion:
    Type: String
    Description: Region to create Certificate in (Default region of CFN stack)
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-south-1
      - ap-southeast-1
      - ap-southeast-2
      - ca-central-1
      - eu-central-1
      - sa-east-1
      - us-gov-west-1
      - False
    Default: False

Outputs:
  CertificateArn:
    Description: SSL certificate ARN
    Value: !GetAtt Certificate.Arn

Conditions:
    HasCertRegion: !Equals [ !Ref CertRegion, False ]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: ApiLambdaPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - acm:Request*
                  - acm:Describe*
                  - acm:DeleteCertificate
                  - acm:ListCertificates
                  - logs:Describe*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
            Effect: Allow

  CertificateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python2.7
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 50
      Code:
        ZipFile: |
          import boto3, json, traceback, time
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              response_data = {}
              try:
                  client = boto3.client('acm',region_name=event['ResourceProperties']["CertRegion"])
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                      logger.info("Event Body - " + json.dumps(event))

                      domain_name_parameter = event['ResourceProperties']['DomainName']

                      cert_arn = client.request_certificate(DomainName=domain_name_parameter,ValidationMethod='DNS')['CertificateArn']
                      time.sleep(5)
                      validation_resource_record = client.describe_certificate(CertificateArn=cert_arn)

                      logger.info("Name - " + validation_resource_record['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name'])
                      response_data['ResourceRecordName'] = validation_resource_record['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Name']
                      response_data['ResourceRecordValue'] = validation_resource_record['Certificate']['DomainValidationOptions'][0]['ResourceRecord']['Value']
                      response_data['Arn'] = validation_resource_record['Certificate']['CertificateArn']

                      logger.info("Resposne - " + json.dumps(response_data))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, cert_arn)

                  elif event["RequestType"] == "Delete":
                      logger.info("Event Body - " + json.dumps(event))
                      cert_arn = event['PhysicalResourceId']
                      client.delete_certificate(CertificateArn=cert_arn)
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
                  else:
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.FAILED,{})
              except Exception as e:
                  msg = 'See details in CloudWatch Log Stream: ' + context.log_stream_name
                  response_data['exception'] = str(e)[0:255] + '... ' + msg
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  CertificateAwaitValidationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python2.7
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3, json, traceback, time
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              response_data = {}
              try:
                  client = boto3.client('acm',region_name=event['ResourceProperties']["CertRegion"])
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                      logger.info("Event Body - " + json.dumps(event))

                      domain = event['ResourceProperties']['DomainName']

                      # as long as we have at least 10 seconds left
                      while context.get_remaining_time_in_millis() > 10000:
                          time.sleep(5)
                          resp = client.list_certificates(CertificateStatuses=['ISSUED'])
                          if any(cert['DomainName'] == domain for cert in resp['CertificateSummaryList']):
                              cert_info = [cert for cert in resp['CertificateSummaryList']
                                           if cert['DomainName'] == domain][0]
                              logger.info("Certificate has been issued for domain %s, ARN: %s" %
                                       (domain, cert_info['CertificateArn']))
                              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                              return True
                          logger.info("Awaiting cert for domain %s" % domain)

                      logger.warning("Timed out waiting for cert for domain %s" % domain)

                      logger.info("Resposne - " + json.dumps(response_data))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

                  elif event["RequestType"] == "Delete":
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,{})
                  else:
                      logger.info("Event Body - " + json.dumps(event))
                      cfnresponse.send(event, context, cfnresponse.FAILED,{})
              except Exception as e:
                  msg = 'See details in CloudWatch Log Stream: ' + context.log_stream_name
                  response_data['exception'] = str(e)[0:255] + '... ' + msg
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  Certificate:
    Type: Custom::ACM
    DependsOn:
      - CertificateLambdaFunction
    Properties:
      ServiceToken: !GetAtt CertificateLambdaFunction.Arn
      DomainName: !Sub '${DomainName}'
      CertRegion:
        Fn::If:
          - HasCertRegion
          - !Sub ${AWS::Region}
          - Ref: CertRegion

  ValidateCertificate:
    Type: AWS::Route53::RecordSet
    DependsOn: Certificate
    Properties:
      HostedZoneName: !Sub '${ValidationDomain}.'
      Comment: !Sub ${AWS::StackName}
      Name: !GetAtt Certificate.ResourceRecordName
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt Certificate.ResourceRecordValue

  AwaitValidateCertificate:
    Type: Custom::ValidateACM
    DependsOn:
      - Certificate
      - ValidateCertificate
    Properties:
      ServiceToken: !GetAtt CertificateAwaitValidationLambdaFunction.Arn
      DomainName: !Sub '${DomainName}'
      CertRegion:
        Fn::If:
          - HasCertRegion
          - !Sub ${AWS::Region}
          - Ref: CertRegion
